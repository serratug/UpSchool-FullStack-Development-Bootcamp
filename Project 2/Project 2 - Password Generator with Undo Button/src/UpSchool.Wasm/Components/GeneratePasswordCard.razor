@using UpSchool.Wasm.Common.Utilities
@using UpSchool.Domain.Entities

<div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header">
                    <div class="card-title text-center">
                        <h2 class="text-info">
                            Password Generator @if(!string.IsNullOrEmpty(UserName)) @UserName
                        </h2>
                        <p>Create secure passwords with our Password Generator</p>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <p>@password</p>
                        </div>
                        <div class="col-md-1">
                            <span @onclick=@UndoGeneratePassword class="@($"oi oi-action-undo {CssUtilities.GetCssForUndoIcon(passwordCareTaker.GetStateCount())}")" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick="@(() => SavePasswordAsync())" class="oi oi-folder clickable" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick="@(() => CopyToClipboardAsync())" class="oi oi-document clickable" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick=@GeneratePassword class="oi oi-loop-circular clickable" aria-hidden="true"></span>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <hr class=@CssUtilities.GetCssColourClassForPasswords(password.Length) style="height: 2vh !important;" />
                </div>
            </div>
        </div>

    </div>

@code {
    [Parameter]
    public string? UserName { get; set; }
    
    [Parameter]
    public string password { get; set; }

    [Parameter]
    public PasswordCareTaker passwordCareTaker { get; set; }

    [Parameter]
    public PasswordOriginator passwordOriginator { get; set; }
    
    [Parameter]
    public EventCallback OnCopyToClipboardAsync { get; set; }
    
    [Parameter]
    public EventCallback OnSavePasswordAsync { get; set; }
    
    [Parameter]
    public EventCallback OnGeneratePassword { get; set; }
    
    [Parameter]
    public EventCallback OnUndoGeneratePassword { get; set; }
    
    
    private Task SavePasswordAsync()
    {
        return OnCopyToClipboardAsync.InvokeAsync();
    }
    
    private Task CopyToClipboardAsync()
    {
        return OnSavePasswordAsync.InvokeAsync();
    }
    
    private Task GeneratePassword()
    {
        return OnGeneratePassword.InvokeAsync();
    }
    
    private Task UndoGeneratePassword()
    {
        return OnUndoGeneratePassword.InvokeAsync();
    }

}