@page "/passwordGenerator"
@page "/passwordGenerator/{PasswordLength:int}"
@page "/passwordGenerator/{PasswordLength:int}/{UserName}"
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Entities
@using UpSchool.Domain.Services
@using UpSchool.Domain.Utilities
@using UpSchool.Wasm.Common.Utilities
@using UpSchool.Wasm.Components
@inject IJSRuntime JsRuntime
@inject IToasterService ToastService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container">
    
    <GeneratePasswordCard 
        UserName="@UserName"
        password="@password"
        generatePasswordDto="@generatePasswordDto"
        passwordCareTaker="@passwordCareTaker"
        passwordOriginator="@passwordOriginator"
        OnCopyToClipboardAsync="CopyToClipboardAsync"
        OnSavePasswordAsync="SavePasswordAsync"
        OnGeneratePassword="GeneratePassword"
        OnUndoGeneratePassword="UndoGeneratePassword" />

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-body">
                    <div class="mt-2 text-center">
                        <label>
                            Password Length <span class="@($"badge {CssUtilities.GetCssColourClassForPasswords(generatePasswordDto.Length)}")">@password.Length</span>
                        </label>

                        <input class="form-range" type="range"
                               value="@generatePasswordDto.Length" @oninput=@OnInputChange min="6" max="40" step="1"/>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeNumbers"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "numbers"))" id="numbers"/>
                        <label class="form-check-label" for="numbers">Numbers</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeLowercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "lowercaseChars"))" id="lowercaseChars"/>
                        <label class="form-check-label" for="lowercaseChars">Lowercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeUppercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "uppercaseChars"))" id="uppercaseChars"/>
                        <label class="form-check-label" for="uppercaseChars">Uppercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeSpecialCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "specialChars"))" id="specialChars"/>
                        <label class="form-check-label" for="specialChars">Special Chars</label>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <SavedPasswordsCard
        savedPasswords="@savedPasswords"
        OnCopyToClipboardAsync="CopyToClipboardAsync"
        OnClearSavedPasswords=@ClearSavedPasswords />

</div>


@code
{
    [Parameter]
    public int? PasswordLength { get; set; }

    [Parameter]
    public string? UserName { get; set; }

    public PasswordGenerator passwordGenerator = new PasswordGenerator();

    public GeneratePasswordDto generatePasswordDto = new GeneratePasswordDto();

    public string password = string.Empty;

    public string CssColourClass = "bg-danger";

    private List<string> savedPasswords;

    private PasswordCareTaker passwordCareTaker;

    private PasswordOriginator passwordOriginator;

    protected override async Task OnInitializedAsync()
    {
        passwordCareTaker = new PasswordCareTaker();
        passwordOriginator = new PasswordOriginator();
        
        savedPasswords = new List<string>();

        if (PasswordLength.HasValue) generatePasswordDto.Length = PasswordLength.Value;

        GeneratePassword();

        var localStoragePasswords = await LocalStorage.GetItemAsync<List<string>>("savedPasswords");

        if (localStoragePasswords is not null) savedPasswords = localStoragePasswords;

        await base.OnInitializedAsync();
    }

    private async Task SavePasswordAsync()
    {
        ToastService.ShowSuccess("The selected password was successfully saved.");

        if (savedPasswords.Any(x => x == password)) await Task.CompletedTask;

        savedPasswords.Add(password);

        await LocalStorage.SetItemAsync("savedPasswords", savedPasswords);
    }

    private void GeneratePassword()
    {
        AddPasswordToHistory();
        
        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = CssUtilities.GetCssColourClassForPasswords(generatePasswordDto.Length);
        
        //savedPasswords.Add(password);
    }

    private async Task CopyToClipboardAsync()
    {
        ToastService.ShowSuccess("The selected password was copied to the clipboard.");

        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);
    }

    private void CheckboxOnChange(ChangeEventArgs args, string checkBoxName)
    {
        switch (checkBoxName)
        {
            case "numbers":
                generatePasswordDto.IncludeNumbers = Convert.ToBoolean(args.Value);
                break;

            case "lowercaseChars":
                generatePasswordDto.IncludeLowercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "uppercaseChars":
                generatePasswordDto.IncludeUppercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "specialChars":
                generatePasswordDto.IncludeSpecialCharacters = Convert.ToBoolean(args.Value);
                break;

            default:
                throw new Exception("Beklenmedik bir Checkbox adı geldi.");
                break;

        }

        if (generatePasswordDto.IncludeNumbers is false && generatePasswordDto.IncludeLowercaseCharacters is false
        && generatePasswordDto.IncludeUppercaseCharacters is false && generatePasswordDto.IncludeSpecialCharacters is false)
        {
            password = String.Empty;
        }
        else
        {
            password = passwordGenerator.Generate(generatePasswordDto);
        }

    }

    private void OnInputChange(ChangeEventArgs args)
    {
        AddPasswordToHistory();

        generatePasswordDto.Length = Convert.ToInt32(args.Value);

        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = CssUtilities.GetCssColourClassForPasswords(generatePasswordDto.Length);
        
    }
    
    private void ClearSavedPasswords()
    {
        savedPasswords.Clear();
    }
    
    private void UndoGeneratePassword()
    {
        if (passwordCareTaker.GetStateCount() != 0)
        {
            passwordOriginator.GetState(passwordCareTaker.Pop());
            password = passwordOriginator.State;
            generatePasswordDto.Length = password.Length;
        }
    }

    private void AddPasswordToHistory()
    {
        if (password != string.Empty)
        {
            passwordOriginator.SetState(password);
            passwordCareTaker.Push(passwordOriginator.SaveState());
        }
    }
}

<style>
    body {
        background: #393E46
    }
</style>