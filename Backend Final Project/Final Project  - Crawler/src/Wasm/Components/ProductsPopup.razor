@using Application.Common.Models.Product
@using Application.Features.Products.Queries.GetAll
@using Application.Common.Models.General
@using System.Globalization
@inject HttpClient HttpClient

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content" style="overflow-y:auto;">
            <div class="modal-header">
                <h5 class="modal-title">Products of Order @orderId</h5>
                <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body" style="overflow: auto;">
                @if (paginatedProducts is not null)
                {
                    if (paginatedProducts.TotalCount == 0)
                    {
                        <p>No products to see.</p>
                    }
                    else
                    {
                        <table class="table table-responsive text-center align-items-center justify-content-center border-light"
                               style="background-color: transparent; color: #fbfbfb; width: 100%">
                            <thead class="border-light">
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Name</th>
                                <th scope="col">Price</th>
                                <th scope="col">Sale Price</th>
                            </tr>
                            </thead>
                            <tbody class="font-weight-lighter">

                            @foreach (var product in paginatedProducts.Items)
                            {
                                <tr class="text-center align-middle">
                                    <td class="image-cell">
                                        <img alt="" src="@product.Picture" style="height: 4em;"/>
                                    </td>
                                    <td style="max-width: 100px">@product.Name</td>
                                    <td style="@StyleForPrice(product.IsOnSale)">@product.Price.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))</td>
                                    <td style="@StyleForSalePrice(product.IsOnSale)">@(product.IsOnSale ? product.SalePrice.ToString("C2", CultureInfo.CreateSpecificCulture("en-US")) : "-")</td>
                                </tr>
                            }
                            
                            </tbody>
                        </table>
                    }
                    
                    <nav>
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(paginatedProducts.HasPreviousPage ? "" : "disabled")">
                                <button class="page-link" tabindex="-1" disabled="@(!paginatedProducts.HasPreviousPage)" @onclick="() => LoadPage(paginatedProducts.PageNumber - 1)">
                                    <span aria-hidden="true">&laquo;</span>
                                </button>
                            </li>

                            @foreach (var pageNumber in Enumerable.Range(1, paginatedProducts.TotalPages))
                            {
                                <li class="page-item @(pageNumber == paginatedProducts.PageNumber ? "active" : "")">
                                    <button class="page-link" tabindex="-1" @onclick="() => LoadPage(pageNumber)">@pageNumber</button>
                                </li>
                            }
                                  
                            <li class="page-item @(paginatedProducts.HasNextPage ? "" : "disabled")">
                                <button class="page-link" tabindex="-1" disabled="@(!paginatedProducts.HasNextPage)" @onclick="() => LoadPage(paginatedProducts.PageNumber + 1)">
                                    <span aria-hidden="true">&raquo;</span>
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
            <div class="modal-footer">

            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    
    [Parameter]
    public bool IsVisible { get; set; }
    
    private PaginatedList<ProductGetAllDto> paginatedProducts;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private string modalDisplay = "none;";
    
    private string modalClass = "popup-content-products";
    
    private bool showBackdrop = false;
    
    Guid orderId;
    
    private int currentPage = 1;
    
    private int pageSize = 6;

    public async Task Open(Guid orderId)
    {
        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;
        this.orderId = orderId;

        await LoadProducts(currentPage);
        
        StateHasChanged();
    }
    
    private async Task LoadProducts(int page)
    {
        var response = await HttpClient.PostAsJsonAsync("Products/GetAll", new ProductGetAllQuery(orderId, page, pageSize));
        
        if (response.IsSuccessStatusCode)
        {
            var apiResponse = await response.Content.ReadFromJsonAsync<PaginatedApiResponse<ProductGetAllDto>>();
            paginatedProducts = apiResponse.ToPaginatedList(pageSize);

        }
        
        StateHasChanged();
    }

    private async Task LoadPage(int page)
    {
        if (currentPage != page)
        {
            currentPage = page;
            await LoadProducts(page);
        }
    }

    public void Close()
    {
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
    }

    private string StyleForPrice(bool isOnSale)
    {
        if (isOnSale) return "text-decoration: line-through; color: #bbbbbb;";

        return "";
    }

    private string StyleForSalePrice(bool isOnSale)
    {
        if (isOnSale) return "color: #14A44D;";

        return "";
    }
}

<style>

    .modal-header {
        color: #fbfbfb;
        letter-spacing: 2px;
        font-size: 1.2em;
        font-family: 'Inconsolata', monospace;
    }  
    .modal-content {
        background-color: rgba(34, 40, 49, .6);
        box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }
    
    .modal-body {
        overflow-y: scroll;
    }
    
     .modal-body table tbody {
         border-color: #ababab;
     }

     .modal-body table tr .image-cell {
         background: #ffffff;
         max-width: 90px;
         box-shadow: rgba(0, 0, 0, 0.06) 0px 2px 4px 0px inset;
     }

     ::-webkit-scrollbar {
         width: 12px;
     }

     ::-webkit-scrollbar-track {
         -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
         border-radius: 10px;
     }

     ::-webkit-scrollbar-thumb {
         border-radius: 10px;
         -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);
     }
     
    .modal-open {
        padding-right: 0 !important;
    }
    
    html {
      overflow-y: scroll !important;
    }
        
    .pagination li button {
        color: #fbfbfb;
    }
    
    .pagination li button:hover {
        color: #506680;
    }
    
    ul.pagination li button:hover:not(.active) {background-color: #ddd;}
    
    
     
</style>